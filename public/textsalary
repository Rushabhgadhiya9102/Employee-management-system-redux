// src/App.js
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { addSalarySlip } from './store/salarySlice';
import { jsPDF } from 'jspdf';
import Papa from 'papaparse';
import './App.css';

const App = () => {
    const dispatch = useDispatch();
    const salarySlips = useSelector((state) => state.salary.salarySlips);
    const departments = useSelector((state) => state.salary.departments);
    const salaries = useSelector((state) => state.salary.salaries);

    const [employeeName, setEmployeeName] = useState('');
    const [month, setMonth] = useState('');
    const [year, setYear] = useState('');
    const [modalData, setModalData] = useState(null);

    const handleGenerateSlip = () => {
        if (employeeName && month && year) {
            dispatch(addSalarySlip({ employeeName, month, year }));
            setEmployeeName('');
            setMonth('');
            setYear('');
        } else {
            alert('Please fill in all fields.');
        }
    };

    const handleViewSlip = (slip) => {
        setModalData(slip);
    };

    const handleCloseModal = () => {
        setModalData(null);
    };

    const generatePDF = () => {
        const doc = new jsPDF();
        const salaryInfo = salaries[modalData.employeeName];
        const total = salaryInfo.basic + salaryInfo.housing + salaryInfo.transport + salaryInfo.bonus;

        doc.text('Salary Slip', 105, 20, { align: 'center' });
        doc.text(`Employee: ${modalData.employeeName}`, 20, 40);
        doc.text(`Department: ${departments[modalData.employeeName]}`, 20, 50);
        doc.text(`Month: ${modalData.month}`, 20, 60);
        doc.text(`Year: ${modalData.year}`, 20, 70);
        doc.text(`Total Salary: $${total.toFixed(2)}`, 20, 80);
        doc.save(`Salary_Slip_${modalData.employeeName}_${modalData.month}_${modalData.year}.pdf`);
    };

    const generateCSV = () => {
        const salaryInfo = salaries[modalData.employeeName];
        const total = salaryInfo.basic + salaryInfo.housing + salaryInfo.transport + salaryInfo.bonus;

        const data = {
            'Employee Name': modalData.employeeName,
            'Department': departments[modalData.employeeName],
            'Month': modalData.month,
            'Year': modalData.year,
            'Total Salary': `$${total.toFixed(2)}`
        };

        const csv = Papa.unparse([data]);
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.setAttribute('href', url);
        link.setAttribute('download', `Salary_Slip_${modalData.employeeName}_${modalData.month}_${modalData.year}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-3xl font-bold text-center mb-4">Salary Slip Generator</h1>
            <div className="bg-white p-6 rounded-lg shadow-md mb-4">
                <h2 className="text-xl font-semibold mb-4">Generate Salary Slip</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <select value={employeeName} onChange={(e) => setEmployeeName(e.target.value)} className="border rounded p-2">
                        <option value="">Select Employee</option>
                        {Object.keys(departments).map((name) => (
                            <option key={name} value={name}>{name}</option>
                        ))}
                    </select>
                    <select value={month} onChange={(e) => setMonth(e.target.value)} className="border rounded p-2">
                        <option value="">Select Month</option>
                        {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((m) => (
                            <option key={m} value={m}>{m}</option>
                        ))}
                    </select>
                    <input type="number" value={year} onChange={(e) => setYear(e.target.value)} placeholder="Year" className="border rounded p-2" />
                </div>
                <button onClick={handleGenerateSlip} className="mt-4 bg-blue-600 text-white p-2 rounded">Generate Salary Slip</button>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-md">
                <h2 className="text-xl font-semibold mb-4">Generated Salary Slips</h2>
                <ul>
                    {salarySlips.map((slip, index) => (
                        <li key={index} className="flex justify-between items-center border-b py-2">
                            <span>{slip.employeeName} - {slip.month} {slip.year}</span>
                            <button onClick={() => handleViewSlip(slip)} className="text-blue-600">View</button>
                        </li>
                    ))}
                </ul>
            </div>

            {modalData && (
                <div className="fixed inset-0 flex items-center justify-center bg-gray-500 bg-opacity-75">
                    <div className="bg-white p-6 rounded-lg shadow-md">
                        <h3 className="text-lg font-semibold">Salary Slip Details</h3>
                        <p>Employee: {modalData.employeeName}</p>
                        <p>Department: {departments[modalData.employeeName]}</p>
                        <p>Month: {modalData.month}</p>
                        <p>Year: {modalData.year}</p>
                        <button onClick={generatePDF} className="mt-4 bg-blue-600 text-white p-2 rounded">Download PDF</button>
                        <button onClick={generateCSV} className="mt-2 bg-green-600 text-white p-2 rounded">Download CSV</button>
                        <button onClick={handleCloseModal} className="mt-2 bg-red-600 text-white p-2 rounded">Close</button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default App;


import { useSelector, useDispatch } from "react-redux";
import { closeSalaryModal } from "../../features/modal/salaryModalSlice";
import { AnimatePresence, motion } from "framer-motion";
import { FaCircleXmark } from "react-icons/fa6";
import { jsPDF } from "jspdf";

const SalaryModal = () => {
  const dispatch = useDispatch();
  const { isOpen, selectedEmployee } = useSelector((state) => state.salaryModal);
  const salarySlips = useSelector((state) => state.salarySlips.salaryArr);

  if (!isOpen || !selectedEmployee) return null;
  
  const employeeSlips = salarySlips.filter(
    (slip) => slip.employeesSalarySlip === selectedEmployee.employeeName
  );

  // Handle case when there are no slips for the employee
  if (employeeSlips.length === 0) {
    return (
      <p className="text-gray-500">
        No salary slips found for {selectedEmployee.employeeName}.
      </p>
    );
  }

  // Current slip data (assuming we're showing the first match)
  const currentSlip = employeeSlips[0];

  // Calculations
  const totalEarnings = (
    (parseFloat(selectedEmployee.employeeSalary) || 0) +
    (parseFloat(selectedEmployee.hra) || 0) +
    (parseFloat(selectedEmployee.da) || 0) +
    (parseFloat(selectedEmployee.ta) || 0) +
    (parseFloat(selectedEmployee.bonus) || 0)
  ).toFixed(2);

  const totalDeductions = (
    (parseFloat(selectedEmployee.tax) || 0) +
    (parseFloat(selectedEmployee.pf) || 0) +
    (parseFloat(selectedEmployee.pt) || 0)
  ).toFixed(2);

  const netSalary = (totalEarnings - totalDeductions).toFixed(2);

  // ----- DOWNLOAD FUNCTIONS -----

  const handleDownloadPDF = () => {
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(18);
    doc.text("SALARY SLIP", 105, 20, null, null, "center");
    
    // Employee Info
    doc.setFontSize(12);
    doc.text(`Employee Name: ${selectedEmployee.employeeName}`, 20, 40);
    doc.text(`Department: ${selectedEmployee.department}`, 20, 50);
    doc.text(`Month/Year: ${currentSlip.month} ${currentSlip.year}`, 20, 60);

    // Earnings
    doc.text("Earnings", 20, 80);
    doc.text(`Basic Salary: $${selectedEmployee.employeeSalary}`, 30, 90);
    doc.text(`HRA: $${selectedEmployee.hra}`, 30, 100);
    doc.text(`DA: $${selectedEmployee.da}`, 30, 110);
    doc.text(`TA: $${selectedEmployee.ta}`, 30, 120);
    doc.text(`Bonus: $${selectedEmployee.bonus}`, 30, 130);
    doc.text(`Total Earnings: $${totalEarnings}`, 20, 150);

    // Deductions
    doc.text("Deductions", 110, 80);
    doc.text(`PF: $${selectedEmployee.pf}`, 120, 90);
    doc.text(`PT: $${selectedEmployee.pt}`, 120, 100);
    doc.text(`Tax: $${selectedEmployee.tax}`, 120, 110);
    doc.text(`Total Deductions: $${totalDeductions}`, 110, 130);

    // Net Pay
    doc.setFontSize(14);
    doc.text(`Net Pay: $${netSalary}`, 105, 160, null, null, "center");

    doc.save(`${selectedEmployee.employeeName}_Salary_${currentSlip.month}_${currentSlip.year}.pdf`);
  };

  const handleDownloadCSV = () => {
    // Create CSV content
    const headers = [
      "Employee Name",
      "Department",
      "Month", 
      "Year",
      "Basic Salary",
      "HRA",
      "DA",
      "TA",
      "Bonus",
      "Total Earnings",
      "PF",
      "PT",
      "Tax",
      "Total Deductions",
      "Net Pay"
    ];

    const data = [
      selectedEmployee.employeeName,
      selectedEmployee.department,
      currentSlip.month,
      currentSlip.year,
      selectedEmployee.employeeSalary,
      selectedEmployee.hra,
      selectedEmployee.da,
      selectedEmployee.ta,
      selectedEmployee.bonus,
      totalEarnings,
      selectedEmployee.pf,
      selectedEmployee.pt,
      selectedEmployee.tax,
      totalDeductions,
      netSalary
    ];

    // Convert to CSV string
    const csvContent = [
      headers.join(','),
      data.join(',')
    ].join('\n');

    // Create download link
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `${selectedEmployee.employeeName}_Salary_${currentSlip.month}_${currentSlip.year}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="fixed inset-0 bg-[#8080808c] bg-opacity-50 flex justify-center items-center z-50">
      <AnimatePresence>
        <motion.div
          variants={{
            hidden: { opacity: 0, scale: 0.8 },
            visible: { opacity: 1, scale: 1 }
          }}
          initial="hidden"
          animate="visible"
          exit="hidden"
          transition={{ duration: 0.3 }}
          className="bg-white rounded-lg max-w-7xl max-h-[90vh] overflow-y-auto scrollbar-none relative"
        >
          <button
            onClick={() => dispatch(closeSalaryModal())}
            className="mt-3 mr-3 absolute top-0 right-0 z-10"
          >
            <FaCircleXmark size={30} className="text-gray-600 hover:text-red-500" />
          </button>

          {/* Salary Slip Content (same as before) */}
          <div className="container mx-auto px-4 py-12">
            <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden">
              {/* ... Rest of your salary slip UI ... */}
              
              {/* Footer with download buttons */}
              <div className="p-6 border-t">
                <div className="flex flex-col md:flex-row justify-between items-center gap-4 text-gray-500 text-sm">
                  <div>
                    <p>For any queries, contact HR Department</p>
                    <p>Email: hr@company.com | Phone: (123) 456-7890</p>
                  </div>
                  <div className="flex gap-3">
                    <button 
                      onClick={handleDownloadPDF}
                      className="flex items-center gap-1 px-3 py-1 border rounded-md hover:bg-blue-50 hover:text-blue-600 transition"
                    >
                      <i className="fas fa-download" /> PDF
                    </button>
                    <button 
                      onClick={handleDownloadCSV}
                      className="flex items-center gap-1 px-3 py-1 border rounded-md hover:bg-green-50 hover:text-green-600 transition"
                    >
                      <i className="fas fa-file-csv" /> CSV
                    </button>
                    <button className="flex items-center gap-1 px-3 py-1 border rounded-md hover:bg-gray-50 hover:text-gray-600 transition">
                      <i className="fas fa-print" /> Print
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
      </AnimatePresence>
    </div>
  );
};

export default SalaryModal;
